#pragma once

/** @file */

#include <opencv2/core.hpp>

namespace volcart
{

/**
 * @class Reslice
 * @brief An image generated by intersecting a plane with a Volume
 *
 * Generated by Volume::reslice(). Stores the reslice image, as well as the
 * parameters and position of the reslicing plane.
 *
 * @ingroup Types
 */
class Reslice
{
public:
    /**@{*/
    /**
     * @brief Construct with image data and plane generation parameters
     * @param data Reslice image
     * @param origin Volume position of the origin of the Reslice image
     * @param xvec Vector defining the direction of the Reslice X-axis
     * @param yvec Vector defining the direction of the Reslice Y-axis
     */
    Reslice(
        cv::Mat data,
        const cv::Vec3d& origin,
        const cv::Vec3d& xvec,
        const cv::Vec3d& yvec)
        : sliceData_{std::move(data)}, origin_{origin}, xvec_{xvec}, yvec_{yvec}
    {
    }
    /**@}*/

    /**@{*/
    /** @brief Convert a Reslice coordinate to a Volume coordinate */
    template <typename T>
    cv::Vec3d sliceToVoxelCoord(const cv::Point_<T>& resliceCoord) const
    {
        return origin_ + (resliceCoord.x * xvec_ + resliceCoord.y * yvec_);
    }

    /** @brief Get the Reslice image */
    const cv::Mat& sliceData() const { return sliceData_; }
    /**@}*/

    /**@{*/
    /**
     * @brief Get the Reslice image with an indicator for the middle pixel
     *
     * Used by segmentation::LocalResliceSegmentation. For debug purposes only.
     */
    cv::Mat draw() const;
    /**@}*/

private:
    /** Reslice image */
    cv::Mat sliceData_;
    /** 3D Volume position for the origin of the Reslice image */
    cv::Vec3d origin_;
    /** Vector defining the direction of the Reslice X-axis */
    cv::Vec3d xvec_;
    /** Vector defining the direction of the Reslice Y-axis */
    cv::Vec3d yvec_;
};
}  // namespace volcart