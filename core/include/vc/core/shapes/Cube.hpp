#pragma once

/** @file */

#include <cmath>

#include "ShapePrimitive.hpp"

namespace volcart::shapes
{
/**
 * @author Melissa Shankle
 * @date 1/29/16
 *
 * @brief Cube shape
 *
 * This class builds a cube shape with a corner point at the origin and with
 * edge lengths of size `len`. Negative edge length values will result in
 * "flipping" the cube about the origin.
 *
 * The shape will have 8 points, one for each corner of the cube. The points
 * generated by this class are unordered.
 *
 * @ingroup Shapes
 */
class Cube : public ShapePrimitive
{
public:
    Cube(double len = 5)
    {
        // generate the 8 vertices
        addVertex_(0, 0, 0);
        addVertex_(0, len, 0);
        addVertex_(len, len, 0);
        addVertex_(len, 0, 0);

        addVertex_(0, 0, len);
        addVertex_(0, len, len);
        addVertex_(len, len, len);
        addVertex_(len, 0, len);

        // generate the 12 cells for faces
        addCell_(0, 1, 2);
        addCell_(0, 1, 5);
        addCell_(0, 2, 3);
        addCell_(0, 3, 4);
        addCell_(0, 4, 5);
        addCell_(1, 2, 6);
        addCell_(1, 5, 6);
        addCell_(2, 3, 7);
        addCell_(2, 6, 7);
        addCell_(3, 4, 7);
        addCell_(4, 5, 7);
        addCell_(5, 6, 7);

    }  // Constructor

};  // Cube
}  // namespace volcart::shapes
